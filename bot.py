import logging
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram import Update
import asyncio
from datetime import datetime
import time

from config import Config
from database import Database
from content_parsers import ContentParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class EducationalBot:
    def __init__(self):
        self.config = Config()
        self.db = Database()
        self.parser = ContentParser(self.db)
        self.app = Application.builder().token(self.config.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("find_content", self.find_content))
        self.app.add_handler(CommandHandler("stats", self.stats))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "ü§ñ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/find_content - –ù–∞–π—Ç–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ IT, —è–∑—ã–∫–∞–º –∏ –∏—Å—Ç–æ—Ä–∏–∏."
        )
    
    async def find_content(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        await update.message.reply_text("üîç –ò—â—É –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...")
        
        found_count = await self.collect_and_send_content()
        
        await update.message.reply_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {found_count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        conn = self.db.conn
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT category, COUNT(*) FROM posted_content 
            GROUP BY category
        ''')
        stats = cursor.fetchall()
        
        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        for category, count in stats:
            message += f"{category}: {count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
        
        await update.message.reply_text(message)
    
    async def collect_and_send_content(self):
        """–°–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        total_found = 0
        
        for category, sources in self.config.CONTENT_SOURCES.items():
            keywords = self.config.KEYWORDS.get(category, [])
            
            content_items = await self.parser.get_content_for_category(
                category, sources, keywords
            )
            
            for item in content_items:
                try:
                    await self.send_to_channel(item)
                    self.db.mark_as_posted(
                        item['title'], 
                        item['url'], 
                        item['category']
                    )
                    total_found += 1
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.error(f"Error sending content: {e}")
        
        return total_found
    
    async def send_to_channel(self, content_item):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
        category_emojis = {
            'programming': 'üíª',
            'languages': 'üåç', 
            'history': 'üìö'
        }
        
        emoji = category_emojis.get(content_item['category'], 'üìñ')
        
        message = f"{emoji} <b>{content_item['title']}</b>\n\n"
        
        if content_item['full_content']:
            message += f"{content_item['full_content']}\n\n"
        elif content_item['summary']:
            message += f"{content_item['summary']}\n\n"
        
        message += f"üîó <a href='{content_item['url']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>\n"
        message += f"üè∑Ô∏è #{content_item['category']}"
        
        await self.app.bot.send_message(
            chat_id=self.config.CHANNEL_ID,
            text=message,
            parse_mode='HTML',
            disable_web_page_preview=False
        )
    
    async def auto_post_job(self, context: ContextTypes.DEFAULT_TYPE):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
        try:
            found_count = await self.collect_and_send_content()
            logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {found_count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ auto_post_job: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
        job_queue = self.app.job_queue
        job_queue.run_repeating(
            self.auto_post_job,
            interval=21600,  # 6 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            first=10
        )
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.app.run_polling()

if __name__ == '__main__':
    bot = EducationalBot()
    bot.run()